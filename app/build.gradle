apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'

repositories {
    jcenter()
    maven { url "https://jitpack.io" }
}

android {
    compileSdkVersion 24
    buildToolsVersion "24.0.2"

    useLibrary 'org.apache.http.legacy'
    defaultConfig {
        versionCode 221
        versionName "10.9.991"
        minSdkVersion 14
        targetSdkVersion 23
        testApplicationId "org.liberty.android.fantastischmemo.test"
        testInstrumentationRunner "android.test.InstrumentationTestRunner"
        multiDexEnabled true
        archivesBaseName = "AnyMemo"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        jackOptions {
            enabled false
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    buildTypes {
        debug {
            versionNameSuffix "-${getBuildString()}"
        }
        release {
            minifyEnabled true
            proguardFile 'proguard.cfg'
        }
    }

    productFlavors {
        free {
            applicationId "org.liberty.android.fantastischmemo"
        }
        pro {
            applicationId "org.liberty.android.fantastischmemopro"
        }
    }

    lintOptions {
        disable 'MissingTranslation'
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/maven/com.google.guava/guava/pom.properties'
        exclude 'META-INF/maven/com.google.guava/guava/pom.xml'
    }
}

dependencies {
    compile 'com.android.support:appcompat-v7:24.0.+'
    compile 'com.android.support:cardview-v7:24.0.+'
    compile 'com.android.support:design:24.0.+'
    compile 'com.android.support:support-annotations:24.0.+'
    compile 'com.android.support:multidex:1.0.1'
    compile 'com.j256.ormlite:ormlite-core:4.48'
    compile 'com.j256.ormlite:ormlite-android:4.48'

    compile 'com.google.firebase:firebase-core:9.4.0'
    compile 'com.google.firebase:firebase-crash:9.4.0'

    compile 'oauth.signpost:signpost-core:1.2.1.2'
    compile('oauth.signpost:signpost-commonshttp4:1.2.1.2') {
        exclude module: 'httpclient'
    }
    compile 'commons-io:commons-io:2.4'

    compile 'com.google.guava:guava:19.0'
    compile 'com.opencsv:opencsv:3.4'
    compile 'com.github.PhilJay:MPAndroidChart:v2.1.6'
    compile 'com.rarepebble:colorpicker:2.0.0'
    compile 'com.simplify:ink:0.2.1'
    compile('com.google.dagger:dagger:2.6.1')
    provided 'javax.annotation:jsr250-api:1.0'

    androidTestCompile 'com.crittercism.dexmaker:dexmaker:1.4'
    androidTestCompile 'com.crittercism.dexmaker:dexmaker-dx:1.4'
    androidTestCompile 'com.crittercism.dexmaker:dexmaker-mockito:1.4'
    androidTestCompile 'org.mockito:mockito-core:1.10.19'
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support.test:rules:0.5'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'
    androidTestCompile 'com.android.support.test.espresso:espresso-intents:2.2.2'
    androidTestCompile 'com.android.support:support-annotations:24.0.+'


    apt 'com.google.dagger:dagger-compiler:2.6.1'
}

def getBuildString () {
    def date = new Date()
    def formattedDate = date.format('yyMMdd')
    return "b" + formattedDate
}

task copySecretsIfNotExists << {
    if (!file('src/main/java/org/liberty/android/fantastischmemo/AMSecrets.java').exists()) {
        logger.warn('Empty AMSecrets.java is created from AMSecrets.java.template. Please fill in the values.')
        copy {
            from "src/main/java/org/liberty/android/fantastischmemo/"
            into "src/main/java/org/liberty/android/fantastischmemo/"
            rename "AMSecrets.java.template", "AMSecrets.java"
            include "AMSecrets.java.template"
        }
    }
    if (!file('src/free/google-services.json').exists()) {
        logger.warn('google-services.json is not found .Created from templateservices.json. Please use your own version instead!')
        copy {
            from "src/free"
            into "./"
            rename "templateservices.json", "google-services.json"
            include "templateservices.json"
        }
    }
}

preBuild.dependsOn copySecretsIfNotExists 

// Needs to be at the bottom to have all dependencies ready
apply plugin: 'com.google.gms.google-services'
